<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>